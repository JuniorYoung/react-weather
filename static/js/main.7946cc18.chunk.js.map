{"version":3,"sources":["components/Title.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","temperature","city","country","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","cod","_this","setState","main","temp","sys","weather","message","stop","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7946cc18.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default () => (\r\n    <div>\r\n        <h1 className=\"title-container__title\">Weather Finder</h1>\r\n\t\t<h3 className=\"title-container__subtitle\">Find out temperature, conditions and more...</h3>\r\n    </div>\r\n)","import React from 'react'\r\n\r\nexport default (props) => (\r\n    <form onSubmit={props.getWeather}>\r\n        <input type=\"text\" name='city' placeholder='city...' />\r\n        <input type=\"text\" name='country' placeholder='country...' />\r\n        <button>Get Weather</button>\r\n    </form>\r\n)","import React from 'react'\r\n\r\nexport default (props) => {\r\n    const {\r\n        temperature,\r\n        city,\r\n        country,\r\n        humidity,\r\n        description,\r\n        error\r\n    } = props\r\n    return (\r\n        <div className='weather__info'>\r\n            { \r\n                city && country && \r\n                <p className='weather__key'> Location:\r\n                    <span className=\"weather__value\">\r\n                        {city}, {country}\r\n                    </span>\r\n                </p>\r\n            }\r\n            { \r\n                temperature && \r\n                <p className='weather__key'> Temperature:\r\n                    <span className='weather__value'>\r\n                        {temperature}\r\n                    </span>\r\n                </p>\r\n            }\r\n            { \r\n                humidity && \r\n                <p className='weather__key'> Humidity:\r\n                    <span className='weather__value'>\r\n                        {humidity}\r\n                    </span>\r\n                </p>\r\n            }\r\n            { \r\n                description && \r\n                <p className='weather__key'> Conditions:\r\n                    <span className='weather__value'>\r\n                        {description}\r\n                    </span>\r\n                </p>\r\n            }\r\n            { error && <p className='weather__error'>{error}</p>}\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport Title from './components/Title'\nimport Form from './components/Form'\nimport Weather from './components/Weather'\n\nconst API_KEY = '6cf59d0ae0b032dbdbda1ab7a291f1df'\n\nexport default class App extends React.Component {\n  \n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault()\n    const city = e.target.elements.city.value\n    const country = e.target.elements.country.value\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`)\n    const data = await api_call.json()\n    if(city && country) {\n      if(data.cod !== '404') {\n        this.setState({\n          temperature: data.main.temp,\n          city: data.name,\n          country: data.sys.country,\n          humidity: data.main.humidity,\n          description: data.weather[0].description,\n          error: ''\n        })\n      } else {\n        this.setState({\n          temperature: undefined,\n          city: undefined,\n          country: undefined,\n          humidity: undefined,\n          description: undefined,\n          error: data.message\n        })\n      }\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: 'Please enter the city and the country'\n      })\n    }\n    \n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Title />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Form getWeather={this.getWeather} />\n                  <Weather {...this.state} />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}